

df select:
----------
- X = df.copy()
- y = X.pop('target')
- list_columns = X.select_dtype('object')


dataframe info
--------------
  - df.name.unique()
  - df.dtypes

  - for index, row in df.iterrows():
      print(row['c1'], row['c2'])

dataframe manipulation:
-----------------------
  - df.drop(['a', 'b'], axis=1)
  - new = old.filter(['A','B','D'], axis=1)
  - df.convert_dtypes()           # addd pd.NA NAType in pandas 1.0
    - still works with df.fillna(), df.isna(), df.notna() and df.dropna()
  - df.sum(skpina=False)
  - df = gene_df[gene_df.Symbol == gene]
  - df = df[df['S'] != df['T']]
  - gapminder_2002 = gapminder[gapminder.year.eq(2002)]

sql inerface:
-------------
  - pd.read_sql("select * from table", <sqlalchemy con/sqllite3 con>)
  - pd.to_sql("select * from table", <sqlalchemy con/sqllite3 con>)
    - if_exists=<fail/replace/append>

  engine = create_engine('mysql+mysqldb://root:this is no password@localhost:3306/richards_gene', echo = False)
  df.to_sql(name = 'gene_ncbi', con = engine, if_exists = 'replace', index = False)



read:
-----
  - Cov = pd.read_csv("path/to/file.txt", sep='\t', names=["Sequence", "Start", "End", "Coverage"])


Frpm ML for beginners:
----------------------
- recommendations 
  - use df['mpg] vs df.mpg

- df 
  - create random dataframe 
    - data = np.random.randint(10, 110, size=[10, 12])
    - rand_df = pd.DataFrame(data)
  - info()
  - head()
  - df.value_counts()
  - filter
    - usa_df = df[df['origin'] == 'usa']
  - arrange/sort
    - df.sort_values('by = 'weight').head(5)
  - mutate/change 
    - df['weight/mpg'] = df['weight'] / df['mpg']
  - summarize 
    - origin_df = df.groupby['origin']
    - origin_df['mpg'].mean()
    - df.mean(axis=1)
  - find based on position
    - df.iloc[1, 2]   - cell in row 1, column 2
    - df.iloc[3]        # all columns in row 3
    - df.iloc[2:5, 1:4]
  - find by label based 
    - df.loc['Japan': 'Uruguay', 'Feb':'Apr']
    - df.loc[['Japan', 'France', 'Uruguay'], ['Feb', 'Apr']]
  - boolean 
    - df['Aug'] > 60
    - df[df['Aug'] > 60]
    - df[df['Aug'] > 60 & df['Oct'] < 90]
  - add column 
    - df['meantemp'] = df.mean(axis=1).astype(int)





