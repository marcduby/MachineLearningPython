



NN layers:
----------


Layer Types:
------------
- Embedding for nlp
  - creates word vectors based on all the training data
    - the first dimension should match the max_words of the word dictionary
    - second parameter defines the dimensionality of the word vector space
  - ie: model.add(keras.layers.Embedding(10000, 16))
- Pooling
  - reduce dimensionality for smaller footprint
- Dense
  - fully connected layer to the next layer
  - ie: tf.keras.layers.Dense(128, activation='relu')
 - Flatten
   - takes multi dimensionsl data and flattens to 1D; provide dimensionality params for the data
   - ie: tf.keras.layers.Flatten(input_shape=(28, 28))
- Dropout
  - layer randomly assigns outgoing edge of hidden layer to 0 for each training run, preventing ovefitting
- AlphaDropout

Activation:
-----------
- reLu - fast
- selu - 
- sigmoid - 0/1
- softmax - distribution of probabilities that add to 1

Hyper Parameters:
-----------------
- epochs - number times go through entire training set during training
- iterations - how many times to get through traing set based on batch size
- batch size: number of samples processed before model gradients are updated
  - to avodi loading all data into memory
  - compute gradient and take learning rate step towards gradient after one batch gone hrough training
- validation split - how to split off training data for validation
- shuffle - shuffle the validation/training mix after every epoch

PreProcessing:
--------------
- normalizing data - normalize nmbers so that they range from 0 to 1

Loss:
-----
- categorical_crossentropy - 

Optimizer:
----------
- adam - 

Metrics:
--------
 accuracy -
 
Misc:
-----
- cross validation
  - split train data into 5ths and rotate what segment is validation each round
    - average efficiency afterwards
  - pooling
    - used to reduce data for better compute performance
  
- transfer learning
  - repurpose model from similar problem, retrining last fully connected layer
    

Tips:
-----
- for first dense layer, take 20% size of previous layer


Pandas:
-------
- df.samples(20)
- df.value_counts().head()
