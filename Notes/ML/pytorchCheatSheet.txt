

- tensors
  - a_transpose = torch.transpose(a, 0, 1)   # switch dimensions 0 and 1
  - two_tensor = torch.unsqueeze(torch.transpose(tensor, 1, 2), 3)      # add extra dimension at dim 3
  - tensor_input = torch.unsqueeze(tensor, 3)                           # add extra dimension
  - tensor_input = torch.transpose(tensor_input, 1, 2)                  # flip 2 dimensions
  - tensor_input = tensor_input.to(torch.float)                         # cast to float32 type
  - tensor.dtype            # what type of data the tensor is (has to be same throughout)
  - tensor.shape
  - print("got 0,1 prediction {}".format(predictions[0,2].item()))

- run model
  - pretrained_model_reloaded_th.eval()


- describe model
  - model.parameters()
  - model_weights = pretrained_model_reloaded_th.state_dict()
  
  # Print model's state_dict
print("Model's state_dict:")
for param_tensor in model.state_dict():
    print(param_tensor, "\t", model.state_dict()[param_tensor].size())

# Print optimizer's state_dict
print("Optimizer's state_dict:")
for var_name in optimizer.state_dict():
    print(var_name, "\t", optimizer.state_dict()[var_name])
    
    
    
torch.save(model.state_dict(), PATH)
Load:

model = TheModelClass(*args, **kwargs)
model.load_state_dict(torch.load(PATH))
model.eval()


    
    